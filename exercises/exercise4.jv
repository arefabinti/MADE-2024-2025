// Reusable constraint 
constraint PositiveValue on integer: 
    value > 0;

// Reusable constraint for month range (1 to 12)
constraint MonthRange on integer: 
    value >= 1 and value <= 12;

// Reusable valuetypes applying the constraints
valuetype IdType oftype integer {
    constraints: [PositiveValue]; 
}

valuetype MonthType oftype integer {
    constraints: [MonthRange]; 
}

// Transform Function: Celsius to Fahrenheit conversion
transform TempConvert
{
  from celsius oftype decimal;
  to fahrenheit oftype decimal;

  fahrenheit: (celsius * 9/5) + 32;
}

pipeline TemperaturePipeline {

    // Block for downloading the data file
    block DataFileDownloader oftype HttpExtractor {
        url: "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    // Unzip the data file
    block ArchiveExtractor oftype ArchiveInterpreter {
        archiveType: "zip";
    }

    // Select the CSV file
    block CSVFileSelector oftype FilePicker {
        path: "/data.csv";
    }

    // Interpret the data as text
    block TextDataInterpreter oftype TextFileInterpreter {}

    // Parse the CSV file
    block CSVDataInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    // Rename the battery temperature column
    block RenameBatteryTemperature oftype CellWriter { 
        at: cell J1; 
        write: ["battery_temperature"];
    }

    // Rename other columns to English
    block RenameOtherColumns oftype CellWriter {
        at: range A1:E1;
        write: ["id", "producer", "model", "month", "temperature"];
    }

    // Interpret the data into a table format
    block DataTableInterpreter oftype TableInterpreter {
        header: true;
        columns: [
            "id" oftype IdType,             
            "producer" oftype text,
            "model" oftype text,
            "month" oftype MonthType,        
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal
        ];
    }

    // Convert the temperature to Fahrenheit
    block TempToFahrenheit oftype TableTransformer {
        inputColumns: ['temperature'];
        outputColumn: 'temperature';
        uses: TempConvert;
    }

    // Convert the battery temperature to Fahrenheit
    block BatteryTempToFahrenheit oftype TableTransformer {
        inputColumns: ['battery_temperature'];
        outputColumn: 'battery_temperature';
        uses: TempConvert;
    }

    // Load the data into SQLite database
    block SQLiteDataLoader oftype SQLiteLoader {
        table: 'temperatures';
        file: 'temperatures.sqlite';
    }

    // Connect the blocks in sequence:
    DataFileDownloader
        -> ArchiveExtractor
        -> CSVFileSelector
        -> TextDataInterpreter
        -> CSVDataInterpreter
        -> RenameBatteryTemperature
        -> RenameOtherColumns
        -> DataTableInterpreter
        -> TempToFahrenheit
        -> BatteryTempToFahrenheit
        -> SQLiteDataLoader;
}
