// Exercise 2
// Build an automated data pipeline for the following source:
// https://www.govdata.de/web/guest/suchen/-/details/stadt-neuss-baumpflanzungen-2023
// direct link to CSV: https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/stadt-neuss-herbstpflanzung-2023/exports/csv
// Goal
// Keep only valid data we are interested in
// Define types of values and constraints for them
// We are only interested in “Vogelsang”, valid stadtteil start with "Vogelsang"
// "id" contains geopoints with the following pattern:
// {geo-coordinate 1}, {geo-coordinate 2}
// a geo-coordinate is defined as {1-3 numbers}.{numbers}
// Drop "baumart_deutsch" column
// Drop all rows with invalid values
// Assign fitting built-in SQLite types (e.g., BIGINT, TEXT or FLOAT) to all columns
// Write data into a SQLite database called “trees.sqlite”, in the table “trees”


pipeline TreePipeline {

	// Pipeline to process and load tree planting data into SQLite database
	TreeExtractor 
		-> TreeTextFileInterpreter
		-> TreeCSVInterpreter
        -> BauColumnDeleter
		-> TreeTableInterpreter
		-> TreeDatabaseLoader;
	
	// TreeExtractor: Extracts the CSV file from the provided URL
	block TreeExtractor oftype HttpExtractor {
		url: 'https://opendata.rhein-kreis-neuss.de/api/v2/catalog/datasets/stadt-neuss-herbstpflanzung-2023/exports/csv';
	}
	
	// TreeTextFileInterpreter: Reads the CSV content as plain text
	block TreeTextFileInterpreter oftype TextFileInterpreter { }

	// TreeCSVInterpreter: Interprets the plain text as CSV using ';' as delimiter
	block TreeCSVInterpreter oftype CSVInterpreter {
		delimiter: ';';
	}

	// Table Interpreter without documentation as requested
	block TreeTableInterpreter oftype TableInterpreter {
		header: true;
		columns: [
            'lfd_nr' oftype integer,
            'stadtteil' oftype VogelsangAllowConstrain,
            'standort' oftype text,
            'baumart_botanisch' oftype text,
            'id' oftype GeoAllowConstrain,
            'baumfamilie' oftype text
		];
	}

    // BauColumnDeleter: Removes the 'baumart_deutsch' column (Column E)
    block BauColumnDeleter oftype ColumnDeleter {
        delete: [column E]; 
    }

	// TreeDatabaseLoader: Loads the cleaned and processed data into a SQLite database table 'trees'
	block TreeDatabaseLoader oftype SQLiteLoader {
		table: 'trees'; 
		file: './trees.sqlite'; // Output database file
	}

    // Constraint to allow only 'stadtteil' values starting with 'Vogelsang'
    constraint VogelsangAllow oftype RegexConstraint {
        regex: /^Vogelsang/;
    }

    // Value type definition to apply the 'Vogelsang' constraint
    valuetype VogelsangAllowConstrain oftype text {
        constraints: [
            VogelsangAllow,
        ];
    }

    // Constraint for valid geo-coordinate patterns in the 'id' column
    constraint GeoAllow oftype RegexConstraint {
        regex: /([0-9]{1,3}\.[0-9]+), ([0-9]{1,3}\.[0-9]+)/;
    }

    // Value type definition for geo-coordinates using the 'GeoAllow' constraint
    valuetype GeoAllowConstrain oftype text {
        constraints: [
            GeoAllow,
        ];
    }
}
